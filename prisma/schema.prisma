// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum AccountStatus {
  pending
  onHold
  verified
  rejected
  suspended
  deleted
}

enum AddressCategory {
  residential
  apartment
  condominium
  commercial
}

enum UserRole {
  customer // regular customer requesting services
  manong // service provider
  admin // system administrator
  superadmin // optional, higher-level admin
  moderator // optional, for reviewing/verifications
  guest // optional, limited access
}

model User {
  id              Int              @id @default(autoincrement())
  firstName       String?
  lastName        String?
  nickname        String?
  email           String?
  emailVerifiedAt DateTime?
  password        String?
  role            UserRole         @default(customer)
  isVerified      Boolean          @default(false)
  phone           String           @unique
  addressCategory AddressCategory? @default(residential)
  addressLine     String?
  latitude        Decimal?         @db.Decimal(10, 7)
  longitude       Decimal?         @db.Decimal(10, 7)
  lastKnownLat    Decimal?         @db.Decimal(10, 7)
  lastKnownLng    Decimal?         @db.Decimal(10, 7)
  fcmToken        String?
  profilePhoto    String?

  status                      AccountStatus @default(pending)
  hasSeenVerificationCongrats Boolean       @default(false)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  userRequests          ServiceRequest[]       @relation("UserRequests")
  manongRequests        ServiceRequest[]       @relation("ManongRequests")
  manongProfile         ManongProfile?
  userPaymentMethod     UserPaymentMethod[]
  notifications         UserNotification[]
  providerVerifications ProviderVerification[] @relation("UserProviderVerifications")
  reviewedVerifications ProviderVerification[] @relation("ReviewerProviderVerifications")

  givenFeedbacks    Feedback[] @relation("Reviewer")
  receivedFeedbacks Feedback[] @relation("Reviewee")
}

model PasswordResetToken {
  email     String
  token     String
  createdAt DateTime @default(now())

  @@id([email, token])
}

model ServiceItem {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  priceMin    Decimal  @db.Decimal(10, 2)
  priceMax    Decimal  @db.Decimal(10, 2)
  ratePerKm   Decimal? @db.Decimal(8, 2)
  iconName    String?
  iconColor   String   @default("#3B82F6")
  isActive    Boolean  @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  subServiceItems SubServiceItem[]
  serviceRequest  ServiceRequest[]
}

model SubServiceItem {
  id            Int      @id @default(autoincrement())
  serviceItemId Int
  title         String
  iconName      String?
  description   String?
  cost          Decimal? @db.Decimal(10, 2)
  fee           Decimal? @db.Decimal(10, 2)
  gross         Decimal  @db.Decimal(10, 2)
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  serviceItem        ServiceItem          @relation(fields: [serviceItemId], references: [id], onDelete: Cascade)
  serviceRequest     ServiceRequest[]
  manongSpecialities ManongSpecialities[]

  @@index([serviceItemId])
}

model PaymentMethod {
  id       Int     @id @default(autoincrement())
  name     String
  code     String
  isActive Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  serviceRequest    ServiceRequest[]
  userPaymentMethod UserPaymentMethod[]
}

model UrgencyLevel {
  id    Int      @id @default(autoincrement())
  level String   @db.VarChar(50)
  time  String   @db.VarChar(50)
  price Decimal? @db.Decimal(8, 2)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  serviceRequest ServiceRequest[]
}

enum PaymentStatus {
  unpaid
  pending
  paid
  failed
  refunded
}

enum ServiceRequestStatus {
  awaitingAcceptance
  accepted
  inProgress
  completed
  failed
  cancelled
  rejected
  paused
  pending
  expired
}

model ServiceRequest {
  id               Int     @id @default(autoincrement())
  userId           Int
  manongId         Int?
  serviceItemId    Int
  subServiceItemId Int?
  paymentMethodId  Int?
  urgencyLevelId   Int
  otherServiceName String?
  serviceDetails   String?
  imagesPath       String?

  customerFullAddress String?
  customerLat         Decimal @db.Decimal(10, 7)
  customerLng         Decimal @db.Decimal(10, 7)

  notes                String?
  status               ServiceRequestStatus?
  total                Decimal?              @db.Decimal(10, 2)
  paymentStatus        PaymentStatus         @default(unpaid)
  paymentTransactionId String?               @unique
  paymentRedirectUrl   String?

  user           User            @relation("UserRequests", fields: [userId], references: [id], onDelete: Cascade)
  manong         User?           @relation("ManongRequests", fields: [manongId], references: [id], onDelete: Cascade)
  serviceItem    ServiceItem     @relation(fields: [serviceItemId], references: [id], onDelete: Cascade)
  subServiceItem SubServiceItem? @relation(fields: [subServiceItemId], references: [id], onDelete: Cascade)
  paymentMethod  PaymentMethod?  @relation(fields: [paymentMethodId], references: [id], onDelete: Cascade)
  urgencyLevel   UrgencyLevel    @relation(fields: [urgencyLevelId], references: [id], onDelete: Cascade)
  messages       Message[]
  feedback       Feedback?

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  arrivedAt DateTime?
  deletedAt DateTime?

  acceptedAt  DateTime?
  startedAt   DateTime?
  completedAt DateTime?
  cancelledAt DateTime?

  @@index([userId])
  @@index([manongId])
  @@index([status])
  @@index([createdAt])
}

model Feedback {
  id               Int     @id @default(autoincrement())
  serviceRequestId Int     @unique
  reviewerId       Int // who gives the feedback
  revieweeId       Int // who receives the feedback (manong)
  rating           Int     @db.SmallInt
  comment          String?
  attachmentsPath  String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  serviceRequest ServiceRequest @relation(fields: [serviceRequestId], references: [id], onDelete: Cascade)
  reviewer       User           @relation("Reviewer", fields: [reviewerId], references: [id], onDelete: Cascade)
  reviewee       User           @relation("Reviewee", fields: [revieweeId], references: [id], onDelete: Cascade)

  @@unique([serviceRequestId, reviewerId])
  @@index([revieweeId])
  @@index([reviewerId])
}

enum ManongStatus {
  available
  busy
  offline
  inactive
  suspended
  deleted
}

model ManongProfile {
  id                       Int          @id @default(autoincrement())
  userId                   Int          @unique
  status                   ManongStatus @default(available)
  licenseNumber            String?
  yearsExperience          Int?
  hourlyRate               Decimal?     @db.Decimal(8, 2)
  startingPrice            Decimal?     @db.Decimal(8, 2)
  isProfessionallyVerified Boolean      @default(false)
  dailyServiceLimit        Int          @default(5)
  experienceDescription    String?

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  user               User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  manongSpecialities ManongSpecialities[]
  manongAssistants   ManongAssistant[]

  @@index([status])
  @@index([isProfessionallyVerified])
}

model ManongSpecialities {
  id               Int @id @default(autoincrement())
  manongProfileId  Int
  subServiceItemId Int

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  manongProfile  ManongProfile  @relation(fields: [manongProfileId], references: [id], onDelete: Cascade)
  subServiceItem SubServiceItem @relation(fields: [subServiceItemId], references: [id], onDelete: Cascade)
}

model ManongAssistant {
  id              Int       @id @default(autoincrement())
  manongProfileId Int
  fullName        String
  phone           String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  deletedAt       DateTime?

  manongProfile ManongProfile @relation(fields: [manongProfileId], references: [id], onDelete: Cascade)
}

enum VerificationStatus {
  pending
  approved
  rejected
  deleted
}

model ProviderVerification {
  id           Int                @id @default(autoincrement())
  userId       Int
  documentType String
  documentUrl  String
  status       VerificationStatus @default(pending)
  reviewedBy   Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user     User  @relation("UserProviderVerifications", fields: [userId], references: [id], onDelete: Cascade)
  reviewer User? @relation("ReviewerProviderVerifications", fields: [reviewedBy], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([status])
}

model UserPaymentMethod {
  id                       Int     @id @default(autoincrement())
  userId                   Int
  paymentMethodId          Int // Type: Card, GCash, etc.
  provider                 String // 'paymongo', 'stripe', etc.
  paymentMethodIdOnGateway String?
  last4                    String?
  expMonth                 Int?
  expYear                  Int?
  cardHolderName           String?
  billingEmail             String?
  customerId               String?
  isDefault                Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  paymentMethod PaymentMethod @relation(fields: [paymentMethodId], references: [id], onDelete: Cascade)

  @@unique([userId, provider, paymentMethodIdOnGateway])
}

model Message {
  id         Int    @id @default(autoincrement())
  senderId   Int
  receiverId Int
  roomId     String
  content    String

  seenAt           DateTime?
  serviceRequestId Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  attachment Attachment[]

  serviceRequest ServiceRequest? @relation(fields: [serviceRequestId], references: [id], onDelete: Cascade)

  @@index([roomId])
  @@index([serviceRequestId])
  @@index([senderId])
}

model Attachment {
  id        Int    @id @default(autoincrement())
  messageId Int
  type      String
  url       String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  message Message @relation(fields: [messageId], references: [id], onDelete: Cascade)
}

model UserNotification {
  id     Int     @id @default(autoincrement())
  title  String
  body   String
  data   String?
  userId Int

  seenAt    DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([seenAt])
}

model ServiceSettings {
  id             Int   @id @default(autoincrement())
  serviceTax     Float
  maxDistanceFee Float

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
